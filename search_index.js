var searchModuleIndex = ["","la","storage",];
var searchIndex = ["MemoryFormat","Tensor","apply","assign","broadcast_to","copy","custom_iterator","diagonal","fill","get","is_colmajor","is_colmajor_contiguous","is_contiguous","is_matrix","is_rowmajor","is_rowmajor_contiguous","is_square_matrix","is_vector","iterator","iterators","map","napply","nmap","offset","rank","ravel","reshape","set","size","slice","str","strided_offset","swapaxes","t","transpose","tensor_to_varray","tensor_as_type","broadcastable","TensorData","empty","empty_like","identity","eye","zeros","zeros_like","ones","ones_like","full","full_like","BuildRangeData","range","seq","from_1d","from_2d","from_varray","new_tensor","new_tensor_like","new_tensor_like_with_memory","new_tensor_like_with_shape","new_tensor_from_varray","Num","as_type","strsci","etype","esize","ptr","str","num_as_type","ptr_to_val_of_type","str_esize","arr_esize","arr_etype","MapFn","ApplyFn","NMapFn","NApplyFn","IteratorHandler","TensorIterator","next","IteratorBuildData","[]Tensor","iterators","[]TensorIterator","next","diag","diag_flat","tril","tril_offset","tril_inpl","tril_inpl_offset","triu","triu_offset","triu_inpl","abs","acos","asin","atan","atan2","cbrt","ceil","cos","exp","erf","exp2","floor","fmod","gamma","hypot","log10","log_gamma","log_n","max","min","pow","radians","round","sin","sinh","sqrt","tan","tanh","tensor_str","random","random_seed","array_split","array_split_expl","split","split_expl","hsplit","hsplit_expl","vsplit","vsplit_expl","dsplit","dsplit_expl","AxisData","vstack","hstack","dstack","column_stack","stack","concatenate","expand_dims","StorageStrategy","NullStorage","Storage","StorageData","new_storage","new_storage_like","new_storage_like_with_len","new_storage_from_varray","storage_to_varray","dot","dger","det","inv","matmul","tensordot","CpuStorage","get","set","fill","clone","slice","offset","new_cpu","new_cpu_with_default","new_cpu_from_c_array","cpu_to_varray",];
var searchModuleData = [["<div align=\"center\">",".html"],[" ","la.html"],[" ","storage.html"],];
var searchData = [[""," `MemoryFormat` is a sum type that lists the possible memory layouts ",".html#MemoryFormat","enum "],[""," `Tensor` is the main structure defined by VTL to manage N Dimensional  Array of",".html#Tensor","struct "],[""," apply applies a function to each element of a given Tensor ",".html#Tensor.apply","fn (Tensor)"],[""," assign sets the values of an Tensor equal to the values of another  Tensor of t",".html#Tensor.assign","fn (Tensor)"],[""," broadcast_to broadcasts a Tensor to a compatible shape with no  data copy. ",".html#Tensor.broadcast_to","fn (Tensor)"],[""," returns a copy of an array with a particular memory  layout, either rowmajor-co",".html#Tensor.copy","fn (Tensor)"],[""," iterator creates an iterator through a Tensor with custom data ",".html#Tensor.custom_iterator","fn (Tensor)"],[""," diagonal returns a view of the diagonal entries  of a two dimensional tensor ",".html#Tensor.diagonal","fn (Tensor)"],[""," fill fills an entire Tensor with a given value ",".html#Tensor.fill","fn (Tensor)"],[""," get returns a scalar value from a Tensor at the provided index ",".html#Tensor.get","fn (Tensor)"],[""," is_colmajor returns if a Tensor is supposed to store its data in Col-Major  ord",".html#Tensor.is_colmajor","fn (Tensor)"],[""," is_colmajor verifies if a Tensor stores its data in Col-Major  order ",".html#Tensor.is_colmajor_contiguous","fn (Tensor)"],[""," is_contiguous verifies that a Tensor is contiguous independent of  memory layou",".html#Tensor.is_contiguous","fn (Tensor)"],[""," is_matrix returns if a Tensor is a nxm matrix or not ",".html#Tensor.is_matrix","fn (Tensor)"],[""," is_rowmajor returns if a Tensor is supposed to store its data in Row-Major  ord",".html#Tensor.is_rowmajor","fn (Tensor)"],[""," is_rowmajor verifies if a Tensor stores its data in Row-Major  order ",".html#Tensor.is_rowmajor_contiguous","fn (Tensor)"],[""," is_matrix returns if a Tensor is a square matrix or not ",".html#Tensor.is_square_matrix","fn (Tensor)"],[""," is_matrix returns if a Tensor is a square 1D vector or not ",".html#Tensor.is_vector","fn (Tensor)"],[""," iterator creates an iterator through a Tensor ",".html#Tensor.iterator","fn (Tensor)"],[""," Iterate with n tensors  iterators creates an array of iterators through a list ",".html#Tensor.iterators","fn (Tensor)"],[""," map maps a function to a given Tensor retuning a new Tensor with same shape ",".html#Tensor.map","fn (Tensor)"],[""," apply applies a function to each element of a given Tensor ",".html#Tensor.napply","fn (Tensor)"],[""," map maps a function to a given list of Tensor retuning a new Tensor with same s",".html#Tensor.nmap","fn (Tensor)"],[""," offset returns the index to a Tensor's data at  a given index ",".html#Tensor.offset","fn (Tensor)"],[""," rank returns the number of dimensions of a given Tensor ",".html#Tensor.rank","fn (Tensor)"],[""," ravel returns a flattened view of an Tensor if possible,  otherwise a flattened",".html#Tensor.ravel","fn (Tensor)"],[""," reshape returns an Tensor with a new shape ",".html#Tensor.reshape","fn (Tensor)"],[""," set copies a scalar value into a Tensor at the provided index ",".html#Tensor.set","fn (Tensor)"],[""," size returns the number of allocated elements for a given tensor ",".html#Tensor.size","fn (Tensor)"],[""," slice returns a tensor from a variadic list of indexing operations ",".html#Tensor.slice","fn (Tensor)"],[""," str returns the string representation of a Tensor ",".html#Tensor.str","fn (Tensor)"],[""," stride offset returns the index of the starting offset  for arrays that may be ",".html#Tensor.strided_offset","fn (Tensor)"],[""," swapaxes returns a view of an tensor with two axes  swapped. ",".html#Tensor.swapaxes","fn (Tensor)"],[""," t returns a ful transpose of an tensor, with the axes  reversed ",".html#Tensor.t","fn (Tensor)"],[""," transpose permutes the axes of an tensor in a specified  order and returns a vi",".html#Tensor.transpose","fn (Tensor)"],[""," tensor_to_varray<T> returns the flatten representation of a tensor in a v array",".html#tensor_to_varray","fn "],[""," tensor_as_type<T> returns a new Tensor with a cast to a given type ",".html#tensor_as_type","fn "],[""," broadcastable takes two Tensors and either returns a valid  broadcastable shape",".html#broadcastable","fn "],["","",".html#TensorData","struct "],[""," Return a new Tensor of given shape and type, without initializing entries ",".html#empty","fn "],[""," Return a new Tensor with the same shape and type as a given Tensor. ",".html#empty_like","fn "],[""," The identity array is a square array with ones on the main diagonal. ",".html#identity","fn "],[""," Return a 2-D array with ones on the diagonal and zeros elsewhere. ",".html#eye","fn "],[""," Return a new Tensor of given shape and type, filled with zeros ",".html#zeros","fn "],[""," Return an Tensor of zeros with the same shape and type as a given Tensor ",".html#zeros_like","fn "],[""," Return a new Tensor of given shape and type, filled with ones ",".html#ones","fn "],[""," Return an Tensor of ones with the same shape and type as a given Tensor ",".html#ones_like","fn "],[""," Return a new Tensor of given shape and type, filled with val ",".html#full","fn "],[""," Return a full Tensor with the same shape and type as a given Tensor ",".html#full_like","fn "],["","",".html#BuildRangeData","struct "],[""," range returns a Tensor containing values ranging from [from, to) ",".html#range","fn "],[""," seq returns a Tensor containing values ranging from [0, to) ",".html#seq","fn "],[""," from_1d takes a one dimensional array of floating point values  and returns a o",".html#from_1d","fn "],[""," from_2d takes a two dimensional array of floating point values  and returns a t",".html#from_2d","fn "],[""," from_varray takes a one dimensional array of T values  and coerces it into an a",".html#from_varray","fn "],["","",".html#new_tensor","fn "],["","",".html#new_tensor_like","fn "],["","",".html#new_tensor_like_with_memory","fn "],["","",".html#new_tensor_like_with_shape","fn "],["","",".html#new_tensor_from_varray","fn "],[""," `Num` is a sum type that lists the possible types to be used to define tensor v",".html#Num","type "],[""," as_type<T> returns a Num casted to a given T type ",".html#Num.as_type","fn (Num)"],[""," return a string of the input if f64 or f32 in scientific notation  with digit_n",".html#Num.strsci","fn (Num)"],[""," etype returns the string representation of the specific type of f ",".html#Num.etype","fn (Num)"],[""," esize returns the int representation of the specific size of f ",".html#Num.esize","fn (Num)"],[""," esize returns a safe pointer to a given Num ",".html#Num.ptr","fn (Num)"],[""," str  returns the string representation for a given Num f ",".html#Num.str","fn (Num)"],[""," num_as_type<T> returns a Num casted to a given T type ",".html#num_as_type","fn "],[""," ptr_to_val_of_type returns the number obtained from ptr ",".html#ptr_to_val_of_type","fn "],[""," str_esize returns the int representation of a given type ",".html#str_esize","fn "],[""," str_esize returns the int representation of the size for a given array of Num ",".html#arr_esize","fn "],[""," str_etype returns the type for a given array of Num ",".html#arr_etype","fn "],["","",".html#MapFn","type "],["","",".html#ApplyFn","type "],["","",".html#NMapFn","type "],["","",".html#NApplyFn","type "],[""," IteratorHandler defines a function to use in order to mutate  iteration positio",".html#IteratorHandler","type "],[""," TensorIterator is a struct to hold a Tensors  iteration state while iterating t",".html#TensorIterator","struct "],[""," next calls the iteration type for a given iterator  which is either flat or str",".html#TensorIterator.next","fn (TensorIterator)"],["","",".html#IteratorBuildData","struct "],["","",".html#[]Tensor","type "],[""," Iterate with n tensors  iterators creates an array of iterators through a list ",".html#[]Tensor.iterators","fn ([]Tensor)"],["","",".html#[]TensorIterator","type "],[""," next calls the iteration type for a given list of iterators  which is either fl",".html#[]TensorIterator.next","fn ([]TensorIterator)"],[""," Construct a diagonal array.  Input must be one dimensional and will be placed a",".html#diag","fn "],[""," Construct a diagonal array.  The flattened input is placed along the diagonal  ",".html#diag_flat","fn "],[""," Lower triangle of an array.  Returns a copy of an array with elements above the",".html#tril","fn "],[""," Lower triangle of an array.  Returns a copy of an array with elements above the",".html#tril_offset","fn "],[""," Lower triangle of an array.  Modifies an array inplace with elements above the ",".html#tril_inpl","fn "],[""," Lower triangle of an array.  Modifies an array inplace with elements above the ",".html#tril_inpl_offset","fn "],[""," Upper triangle of an array.  Returns a copy of an array with elements below the",".html#triu","fn "],[""," Upper triangle of an array.  Returns a copy of an array with elements below the",".html#triu_offset","fn "],[""," Upper triangle of an array.  Modifies an array inplace with elements below the ",".html#triu_inpl","fn "],[""," abs returns the elementwise abs of an tensor ",".html#abs","fn "],[""," acos returns the elementwise acos of an tensor ",".html#acos","fn "],[""," asin returns the elementwise asin of an tensor ",".html#asin","fn "],[""," atan returns the elementwise atan of an tensor ",".html#atan","fn "],[""," atan2 returns the atan2 elementwise of two tensors ",".html#atan2","fn "],[""," cbrt returns the elementwise cbrt of an tensor ",".html#cbrt","fn "],[""," ceil returns the elementwise ceil of an tensor ",".html#ceil","fn "],[""," cos returns the elementwise cos of an tensor ",".html#cos","fn "],[""," exp returns the elementwise exp of an tensor ",".html#exp","fn "],[""," erf returns the elementwise erf of an tensor ",".html#erf","fn "],[""," exp2 returns the elementwise exp2 of an tensor ",".html#exp2","fn "],[""," floor returns the elementwise floor of an tensor ",".html#floor","fn "],[""," fmod returns the fmod elementwise of two tensors ",".html#fmod","fn "],[""," gamma returns the elementwise gamma of an tensor ",".html#gamma","fn "],[""," hypot returns the hypot elementwise of two tensors ",".html#hypot","fn "],[""," log10 returns the elementwise log10 of an tensor ",".html#log10","fn "],[""," log_gamma returns the elementwise log_gamma of an tensor ",".html#log_gamma","fn "],[""," log_n returns the log_n elementwise of two tensors ",".html#log_n","fn "],[""," max returns the max elementwise of two tensors ",".html#max","fn "],[""," min returns the min elementwise of two tensors ",".html#min","fn "],[""," pow returns the pow elementwise of two tensors ",".html#pow","fn "],[""," radians returns the elementwise deg2rad of an tensor ",".html#radians","fn "],[""," round rounds elements of an tensor elementwise ",".html#round","fn "],[""," sin returns the elementwise sin of an tensor ",".html#sin","fn "],[""," sinh returns the elementwise sinh of an tensor ",".html#sinh","fn "],[""," sqrt returns the elementwise square root of an tensor ",".html#sqrt","fn "],[""," tan returns the elementwise tan of an tensor ",".html#tan","fn "],[""," tanh returns the elementwise tanh of an tensor ",".html#tanh","fn "],[""," public method for printing arrays, if custom behavior is needed ",".html#tensor_str","fn "],["","",".html#random","fn "],["","",".html#random_seed","fn "],[""," Split an array into multiple sub-arrays.  Please refer to the split documentati",".html#array_split","fn "],[""," Split an array into multiple sub-arrays.  Please refer to the split documentati",".html#array_split_expl","fn "],[""," Split an array into multiple sub-arrays. The array will be divided into  N equa",".html#split","fn "],[""," Split an array into multiple sub-arrays. The array will be divided into  The en",".html#split_expl","fn "],[""," Split an array into multiple sub-arrays horizontally (column-wise).  Please ref",".html#hsplit","fn "],[""," Split an array into multiple sub-arrays horizontally (column-wise)  Please refe",".html#hsplit_expl","fn "],[""," Split an array into multiple sub-arrays vertically (row-wise).  Please refer to",".html#vsplit","fn "],[""," Split an array into multiple sub-arrays vertically (row-wise).  Please refer to",".html#vsplit_expl","fn "],[""," Split array into multiple sub-arrays along the 3rd axis (depth).  Please refer ",".html#dsplit","fn "],[""," Split array into multiple sub-arrays along the 3rd axis (depth).  Please refer ",".html#dsplit_expl","fn "],["","",".html#AxisData","struct "],[""," Stack arrays in sequence vertically (row wise) ",".html#vstack","fn "],[""," Stack arrays in sequence horizontally (column wise) ",".html#hstack","fn "],[""," Stack arrays in sequence depth wise (along third axis) ",".html#dstack","fn "],[""," Stack 1-D arrays as columns into a 2-D array. ",".html#column_stack","fn "],[""," Join a sequence of arrays along a new axis. ",".html#stack","fn "],[""," concatenates two Tensors together ",".html#concatenate","fn "],[""," expand_dims adds an axis to a Tensor in order to support  broadcasting operatio",".html#expand_dims","fn "],["","",".html#StorageStrategy","enum "],["","",".html#NullStorage","struct "],[""," sum type to be used for different strategies ",".html#Storage","type "],["","",".html#StorageData","struct "],["","",".html#new_storage","fn "],["","",".html#new_storage_like","fn "],["","",".html#new_storage_like_with_len","fn "],["","",".html#new_storage_from_varray","fn "],["","",".html#storage_to_varray","fn "],["la","","la.html#dot","fn "],["la","","la.html#dger","fn "],["la","","la.html#det","fn "],["la","","la.html#inv","fn "],["la","","la.html#matmul","fn "],["la","","la.html#tensordot","fn "],["storage"," CpuStorage - this implementation will change once Generics are working correctl","storage.html#CpuStorage","struct "],["storage"," Private function. Used to implement CpuStorage operator ","storage.html#CpuStorage.get","fn (CpuStorage)"],["storage"," Private function. Used to implement assigment to the CpuStorage element ","storage.html#CpuStorage.set","fn (CpuStorage)"],["storage"," fill fills an entire storage with a given value ","storage.html#CpuStorage.fill","fn (CpuStorage)"],["storage"," CpuStorage.clone returns an independent copy of a given CpuStorage ","storage.html#CpuStorage.clone","fn (CpuStorage)"],["storage"," CpuStorage.slice returns an CpuStorage using the same buffer as original CpuSto","storage.html#CpuStorage.slice","fn (CpuStorage)"],["storage","","storage.html#CpuStorage.offset","fn (CpuStorage)"],["storage","","storage.html#new_cpu","fn "],["storage","","storage.html#new_cpu_with_default","fn "],["storage","","storage.html#new_cpu_from_c_array","fn "],["storage","","storage.html#cpu_to_varray","fn "],];
